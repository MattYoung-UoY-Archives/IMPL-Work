module SkelTrivialLang where

-- Haskell module generated by the BNF converter

import AbsTrivialLang
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transLExp :: LExp -> Result
transLExp x = case x of
  Assn ident intexp -> failure x
  Prnt ident -> failure x
transIntExp :: IntExp -> Result
transIntExp x = case x of
  Add intexp1 intexp2 -> failure x
  Mul intexp1 intexp2 -> failure x
  Neg negexp intexp -> failure x
  Nmb integer -> failure x
transNegExp :: NegExp -> Result
transNegExp x = case x of
  NegExp -> failure x

