

module AbsTrivialLang where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data LExp = Assn Ident IntExp | Prnt Ident
  deriving (Eq, Ord, Show, Read)

data IntExp
    = Add IntExp IntExp
    | Mul IntExp IntExp
    | Neg NegExp IntExp
    | Nmb Integer
  deriving (Eq, Ord, Show, Read)

data NegExp = NegExp
  deriving (Eq, Ord, Show, Read)

