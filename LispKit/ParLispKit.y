-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLispKit where
import AbsLispKit
import LexLispKit
import ErrM

}

%name pSExp SExp
%name pListSExp ListSExp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '.' { PT _ (TS _ 3) }

L_integ  { PT _ (TI $$) }
L_ident  { PT _ (TV $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Ident   :: { Ident }   : L_ident  { Ident $1 }

SExp :: { SExp }
SExp : Integer { AbsLispKit.AtomI $1 }
     | Ident { AbsLispKit.AtomV $1 }
     | '(' SExp '.' SExp ')' { AbsLispKit.Cons $2 $4 }
     | '(' ')' { AbsLispKit.Brakets }
     | '(' ListSExp ')' { AbsLispKit.Lst $2 }
ListSExp :: { [SExp] }
ListSExp : SExp { (:[]) $1 } | SExp ListSExp { (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

